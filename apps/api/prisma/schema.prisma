// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model Sample {
//   id        Int      @id @default(autoincrement())
//   name      String
//   code      String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("samples") // if you want to use snake_case format
// }

enum ActiveStatus {
  Active
  Locked
  Inactive
  Other
}

enum Genres {
  Classical
  Pop
  Jazz
  Rock
  Metal
  Other  // Includes multi-genre performances
}

enum DiscountTypes {
  None
  Limited
  Deadline
  LimitedDeadline
}

enum TransactionTypes {
  Purchase
  Refund
  Other
}

model Users {
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(30)
  lastName String? @db.VarChar(30)
  email String @unique
  password String
  pointBalance Int @default(0)
  referralCode String @db.VarChar(15) @unique
  failedLogins Int @default(0)
  active ActiveStatus @default(Active)
  dateCreated DateTime @default(now())
  updated DateTime @updatedAt
  transactions Transactions[]
  history History[]
  codeUsed Point_Balance[] @relation("Referrer")  // This user's code may have been used multiple times
  usedCode Point_Balance? @relation("Referee")  // This user used this code on register, if applicable 
  coupons Coupons[]
}

model Organizers {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  email String @unique
  password String
  failedLogins Int @default(0)
  active ActiveStatus @default(Active)
  emailVerified Boolean @default(false)
  dateCreated DateTime @default(now())
  updated DateTime @updatedAt
  events Events[]
  coupons Coupons[]
}

model Events {
  id Int @id @default(autoincrement())
  organizerID Int
  organizer Organizers @relation(fields: [organizerID], references: [id])
  title String @db.VarChar(50)
  eventDate DateTime
  leads String @db.VarChar(100)  // Event could have more than 1 lead artist; Display all at once in same string
  genre Genres @default(Other)
  venue String @db.VarChar(50)
  eventDesc String
  maxUsers Int  // Maximum number of attendees/tickets sold
  ticketsSold Int @default(0)  // Track how many tickets have been sold
  maxVIPs Int @default(0)  // Maximum number of VIP tickets
  VIPPrice Int?
  normalPrice Int @default(0)  // Events are allowed to be free
  discountType DiscountTypes @default(None)
  ratingAvg Float?
  dateCreated DateTime @default(now())
  updated DateTime @updatedAt
  transactions Transactions[]
  history History[]
  artists Event_Artists[]
  ratings Event_Ratings[]
  discountLimited Events_Discount_Limited[]
  discountDeadline Events_Discount_Deadline?
}

model Transactions {
  id Int @id @default(autoincrement())
  userID Int
  user Users @relation(fields: [userID], references: [id])
  eventID Int?  // Can be empty to allow for special circumstances
  event Events? @relation(fields: [eventID], references: [id])
  ticketCount Int @default(1)
  VIPs Int @default(0)
  normalPrice Int?
  VIPPrice Int?
  discount Int @default(0)  // %-based discount. Limit to 1 discount per transaction
  discountDesc String?
  pointDiscount Int?  // Point-based discounts from referrals. Subtract from total after %-based discount
  total Int @default(0)  // Final total nominal of the transaction
  type TransactionTypes @default(Purchase)
  dateCreated DateTime @default(now())
  special Transactions_Special[]
}

model History {  // History of non-refunded events for each user
  id Int @id @default(autoincrement())
  userID Int
  user Users @relation(fields: [userID], references: [id])
  eventID Int
  event Events @relation(fields: [eventID], references: [id])
}

model Point_Balance {  // Points received only by referrals
  id Int @id @default(autoincrement())
  user1ID Int
  user1 Users @relation(name: "Referrer", fields: [user1ID], references: [id])
  user2ID Int @unique  // Each user can only use a referral code once
  user2 Users @relation(name: "Referee", fields: [user2ID], references: [id])
  nominal Int @default(10000)  // 10k default, per mini project requirement
  expiryDate DateTime  // Need only date portion, set to 90 days after date created
  dateCreated DateTime @default(now())
}

model Coupons {
  id Int @id @default(autoincrement())
  code String @db.VarChar(15) @unique
  userID Int?  // Coupons can be created to provide for offline
  user Users? @relation(fields: [userID], references: [id])
  organizerID Int @default(1)  // Coupons must be created by an organizer. Default 1 for admin for referral coupons
  organizer Organizers @relation(fields: [organizerID], references: [id])
  discount Int @default(10)  // %-based discount. Default 10 as referral coupon discount per mini project requirement
  expiryDate DateTime?  // Coupon can last indefinitely. Need only date portion
  active Boolean @default(true)  // Coupon should deactivate upon use
  dateCreated DateTime @default(now())
  updated DateTime  @updatedAt
}

model Event_Artists {  // Non-lead artists included in events
  id Int @id @default(autoincrement())
  eventID Int
  event Events @relation(fields: [eventID], references: [id])
  name String @db.VarChar(30)
}

model Event_Ratings {
  id Int @id @default(autoincrement())
  eventID Int
  event Events @relation(fields: [eventID], references: [id])
  rating Int  // Should be 1, 2, 3, 4, 5 only
  feedback String?  // Includes overall feedback, event quality, and suggestions
  dateCreated DateTime @default(now())
}

model Events_Discount_Limited {  // Discounts only available up to a certain number of tickets sold
  id Int @id @default(autoincrement())
  eventID Int
  event Events @relation(fields: [eventID], references: [id])
  breakpoint Int  // Can have multiple breakpoints for different discount values
  discount Int  // %-based discount
}

model Events_Discount_Deadline {  // Discounts only available up to a certain date
  id Int @id @default(autoincrement())
  eventID Int @unique
  event Events @relation(fields: [eventID], references: [id])
  deadline DateTime
  discount Int  // %-based discount
}

model Transactions_Special {
  id Int @id @default(autoincrement())
  transactionID Int
  transaction Transactions @relation(fields: [transactionID], references: [id])
  desc String  // Must have description if special case has been made
}